name: Release - Build & Package, Target Prod Install, NPM Publish (manual)

on: 
  workflow_dispatch:
    inputs: 
      releasing:
        required: true
        description: 'Version being released exactly as in package.json (11.2.1-prerelease.0)'

jobs:
  is-publishable:
    name: Check if package published
    runs-on: ubuntu-latest

    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Checksum Liboboe
        run: .github/scripts/liboboe-checksum.sh "liboboe-1.0-x86_64.so liboboe-1.0-alpine-x86_64.so liboboe-1.0-aarch64.so liboboe-1.0-alpine-aarch64.so"

      - name: Setup Node 18
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Check is publishable version
        run: .github/scripts/is-publishable.sh ${{ github.event.inputs.releasing }}

  build-publish-prebuilt:
    name: Build & publish prebuilt platform-specific packages
    runs-on: ubuntu-latest
    needs: is-publishable
    strategy:
      matrix:
        node: ['14', '16', '18']
    
    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          registry-url: 'https://registry.npmjs.org' # Setup .npmrc file to publish to npm

      - name: Show Environment Info
        run: |
          printenv
          node --version
          npm --version
          cat /etc/os-release

      - name: NPM Install dependencies
        run: npm install

      # runs: node build.js for the current node version
      - name: Build from source for Node ${{ matrix.node }}
        run: npm run build

      - name: Publish arm64-linux-gnu-${{ matrix.node }}
        run: npm publish
        working-directory: npm/arm64-linux-gnu-${{ matrix.node }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish arm64-linux-musl-${{ matrix.node }}
        run: npm publish
        working-directory: npm/arm64-linux-musl-${{ matrix.node }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish x64-linux-gnu-${{ matrix.node }}
        run: npm publish
        working-directory: npm/x64-linux-gnu-${{ matrix.node }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish x64-linux-gnu-${{ matrix.node }}
        run: npm publish
        working-directory: npm/x64-linux-musl-${{ matrix.node }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  load-x64-group:
    name: Load x64 Group Config JSON
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Load x64 group data
        id: set-matrix
        run: .github/scripts/matrix-from-json.sh .github/config/x64-group.json

  x64-group-install:
    name: x64 Group Install
    runs-on: ubuntu-latest 
    needs: [load-x64-group, build-publish-prebuilt]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.load-x64-group.outputs.matrix) }}
    container:
        image: ${{ matrix.image }}

    steps:
      # See comment at bottom of file.
      - name: Change Owner of Container Working Directory
        run: chown root:root .

      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Show Environment Info
        run: |
          printenv
          node --version
          npm --version 
          cat /etc/os-release

      - name: NPM Install
        run: npm install

      - name: Check Artifacts
        run: ls ./node_modules/solarwinds-apm-bindings-*/bindings.node && ls ./node_modules/solarwinds-apm-bindings-*/metrics.node

      - name: Run Tests
        run: npm test

  npm-publish:
    name: NPM Publish
    runs-on: ubuntu-latest 
    needs: x64-group-install

    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Show Environment Info
        run: |
          printenv
          node --version
          npm --version 
          cat /etc/os-release
  
      - name: Setup Node 18
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'  # Setup .npmrc file to publish to npm

      # *** IMPORTANT: 
      # by default any package published to npm registry is tagged with 'latest'. to set other pass --tag. 
      # any pre-release package (has - in version), regardless of name defined with version preid, will be npm tagged with 'prerelease'.
      # if package is scoped to organization (e.g. @appoptics/apm-binding) set --access public to avoid 402 Payment Required
      - name: NPM Publish (prerelease)
        run: npm publish --tag prerelease --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        if: ${{ contains(github.event.inputs.releasing, '-') }}

      - name: NPM Publish (latest)
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        if: ${{ !contains(github.event.inputs.releasing, '-') }}

  unpublish-prebuilt:
    name: Unpublish prebuilt platform-specific packages
    runs-on: ubuntu-latest
    needs: [build-publish-prebuilt, x64-group-install]
    if: ${{ always() && contains(needs.*.result, 'failure') }}
    strategy:
      matrix:
        node: ['14', '16', '18']

    steps:
      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          registry-url: 'https://registry.npmjs.org' # Setup .npmrc file to unpublish from npm

      - name: Unpublish arm64-linux-gnu-${{ matrix.node }}
        run: npm unpublish solarwinds-apm-bindings-arm64-linux-gnu-${{ matrix.node }}@${{ github.event.inputs.releasing }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Unpublish arm64-linux-musl-${{ matrix.node }}
        run: npm unpublish solarwinds-apm-bindings-arm64-linux-musl-${{ matrix.node }}@${{ github.event.inputs.releasing }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Unpublish x64-linux-gnu-${{ matrix.node }}
        run: npm unpublish solarwinds-apm-bindings-x64-linux-gnu-${{ matrix.node }}@${{ github.event.inputs.releasing }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Unpublish x64-linux-gnu-${{ matrix.node }}
        run: npm unpublish solarwinds-apm-bindings-x64-linux-musl-${{ matrix.node }}@${{ github.event.inputs.releasing }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Why Change Owner of Container Working Directory?

      # the working directory is created by the runner and mounted to the container.
      # container user is root and the runner is not a user in the container.
      # this is a github actions design flaw.
      # when npm 7 is run as root, scripts are always run with the effective uid and gid of the working directory owner.
      # node 16 can't install under default setup.
      # specifying workdir for container and path for checkout does not work due to bug.
