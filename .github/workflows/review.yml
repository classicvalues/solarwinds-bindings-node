name: Review - Group Build & Test (on pull)

on: 
  pull_request: 

  workflow_dispatch:

jobs:
  build:
    name: Build for all supported Node versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['14', '16', '18']
    
    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Show Environment Info
        run: |
          printenv
          node --version
          npm --version
          cat /etc/os-release

      - name: NPM Install dependencies
        run: npm ci

      # runs: node build.js for the current node version
      - name: Build from source for Node ${{ matrix.node }}
        run: npm run build

      - name: Upload built packages
        uses: actions/upload-artifact@v3
        with:
          name: npm-${{ matrix.node }}
          path: npm/*

  load-group:
    name: Load Prebuilt Group Config JSON
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v3

        # contains images that are unable to build "out of the box" and will install prebuilt
      - name: Load prebuilt group data
        id: set-matrix
        run: .github/scripts/matrix-from-json.sh .github/config/prebuilt-group.json

  group-test:
    name: Prebuilt Group Test
    runs-on: ubuntu-latest
    needs: [load-group, build]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.load-group.outputs.matrix) }}
    container:
      image: ${{ matrix.image }}

    env:
      SW_APM_SERVICE_KEY: ${{ secrets.SW_APM_SERVICE_KEY }}
      SW_APM_COLLECTOR: ${{ secrets.SW_APM_COLLECTOR }}
      SW_TEST_PROD_SERVICE_KEY: ${{ secrets.SW_TEST_PROD_SERVICE_KEY }}

    steps:
      # the working directory is created by the runner and mounted to the container.
      # container user is root and the runner is not a user in the container.
      # this is a github actions design flaw.
      # when npm 7 is run as root, scripts are always run with the effective uid and gid of the working directory owner.
      # node 16 can't install under default setup.
      # specifying workdir for container and path for checkout does not work due to bug.
      - name: Change Owner of Container Working Directory
        run: chown root:root .

      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Show Environment Info
        run: |
          printenv
          node --version
          npm --version 
          cat /etc/os-release

      # Download all prebuilt packages
      - name: Download Node 14 packages
        uses: actions/download-artifact@v3
        with:
          name: npm-14
          path: npm/
      - name: Download Node 16 packages
        uses: actions/download-artifact@v3
        with:
          name: npm-16
          path: npm/
      - name: Download Node 18 packages
        uses: actions/download-artifact@v3
        with:
          name: npm-18
          path: npm/

      - name: NPM Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  # we should find a way to properly test on arm hardware
  arm-test:
    name: ARMv8 Test
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        image: ['node:18-alpine', 'node:18-slim']

    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Download Node 18 packages
        uses: actions/download-artifact@v3
        with:
          name: npm-18
          path: npm/

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Run tests in ARM container using QEMU
        run: |
          sudo docker run \
            --platform linux/arm64 \
            -e CI=$CI \
            -e SW_APM_SERVICE_KEY=${{ secrets.SW_APM_SERVICE_KEY }} \
            -e SW_APM_COLLECTOR=${{ secrets.SW_APM_COLLECTOR }} \
            -e SW_TEST_PROD_SERVICE_KEY=${{ secrets.SW_TEST_PROD_SERVICE_KEY }} \
            -v $(pwd):/work \
            --rm ${{ matrix.image }} \
            -- 'cat /etc/os-release && cd /work && npm install && npm test'

  checksum:
    name: Checksum Liboboe
    runs-on: ubuntu-latest

    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Checksum Liboboe
        run: .github/scripts/liboboe-checksum.sh "liboboe-1.0-x86_64.so.0.0.0 liboboe-1.0-alpine-x86_64.so.0.0.0 liboboe-1.0-aarch64.so.0.0.0 liboboe-1.0-alpine-aarch64.so.0.0.0"
